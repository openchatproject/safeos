// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package rpc

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - Status
//  - Value
type Result_ struct {
  Status int32 `thrift:"status,1" db:"status" json:"status"`
  Value []byte `thrift:"value,2" db:"value" json:"value"`
}

func NewResult_() *Result_ {
  return &Result_{}
}


func (p *Result_) GetStatus() int32 {
  return p.Status
}

func (p *Result_) GetValue() []byte {
  return p.Value
}
func (p *Result_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *Result_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *Result_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Value = v
}
  return nil
}

func (p *Result_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Result_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("status", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
  if err := oprot.WriteI32(int32(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  return err
}

func (p *Result_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("value", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
  if err := oprot.WriteBinary(p.Value); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.value (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  return err
}

func (p *Result_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Result_(%+v)", *p)
}

type RpcService interface {
  // Parameters:
  //  - CallTime
  //  - FunCode
  //  - ParamMap
  FunCall(ctx context.Context, callTime int64, funCode string, paramMap map[string]string) (r []string, err error)
  ReadAction(ctx context.Context) (r []byte, err error)
  // Parameters:
  //  - Scope
  //  - Table
  //  - Payer
  //  - ID
  //  - Buffer
  DbStoreI64(ctx context.Context, scope int64, table int64, payer int64, id int64, buffer []byte) (r int32, err error)
  // Parameters:
  //  - Itr
  //  - Payer
  //  - Buffer
  DbUpdateI64(ctx context.Context, itr int32, payer int64, buffer []byte) (err error)
  // Parameters:
  //  - Itr
  DbRemoveI64(ctx context.Context, itr int32) (err error)
  // Parameters:
  //  - Itr
  DbGetI64(ctx context.Context, itr int32) (r []byte, err error)
  // Parameters:
  //  - Itr
  DbNextI64(ctx context.Context, itr int32) (r *Result_, err error)
  // Parameters:
  //  - Itr
  DbPreviousI64(ctx context.Context, itr int32) (r *Result_, err error)
  // Parameters:
  //  - Code
  //  - Scope
  //  - Table
  //  - ID
  DbFindI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error)
  // Parameters:
  //  - Code
  //  - Scope
  //  - Table
  //  - ID
  DbLowerboundI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error)
  // Parameters:
  //  - Code
  //  - Scope
  //  - Table
  //  - ID
  DbUpperboundI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error)
  // Parameters:
  //  - Code
  //  - Scope
  //  - Table
  DbEndI64(ctx context.Context, code int64, scope int64, table int64) (r int32, err error)
}

type RpcServiceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRpcService instead
func NewRpcServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RpcServiceClient {
  return &RpcServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRpcService instead
func NewRpcServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RpcServiceClient {
  return &RpcServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRpcServiceClient(c thrift.TClient) *RpcServiceClient {
  return &RpcServiceClient{
    c: c,
  }
}

// Parameters:
//  - CallTime
//  - FunCode
//  - ParamMap
func (p *RpcServiceClient) FunCall(ctx context.Context, callTime int64, funCode string, paramMap map[string]string) (r []string, err error) {
  var _args0 RpcServiceFunCallArgs
  _args0.CallTime = callTime
  _args0.FunCode = funCode
  _args0.ParamMap = paramMap
  var _result1 RpcServiceFunCallResult
  if err = p.c.Call(ctx, "funCall", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

func (p *RpcServiceClient) ReadAction(ctx context.Context) (r []byte, err error) {
  var _args2 RpcServiceReadActionArgs
  var _result3 RpcServiceReadActionResult
  if err = p.c.Call(ctx, "read_action", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

// Parameters:
//  - Scope
//  - Table
//  - Payer
//  - ID
//  - Buffer
func (p *RpcServiceClient) DbStoreI64(ctx context.Context, scope int64, table int64, payer int64, id int64, buffer []byte) (r int32, err error) {
  var _args4 RpcServiceDbStoreI64Args
  _args4.Scope = scope
  _args4.Table = table
  _args4.Payer = payer
  _args4.ID = id
  _args4.Buffer = buffer
  var _result5 RpcServiceDbStoreI64Result
  if err = p.c.Call(ctx, "db_store_i64", &_args4, &_result5); err != nil {
    return
  }
  return _result5.GetSuccess(), nil
}

// Parameters:
//  - Itr
//  - Payer
//  - Buffer
func (p *RpcServiceClient) DbUpdateI64(ctx context.Context, itr int32, payer int64, buffer []byte) (err error) {
  var _args6 RpcServiceDbUpdateI64Args
  _args6.Itr = itr
  _args6.Payer = payer
  _args6.Buffer = buffer
  var _result7 RpcServiceDbUpdateI64Result
  if err = p.c.Call(ctx, "db_update_i64", &_args6, &_result7); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Itr
func (p *RpcServiceClient) DbRemoveI64(ctx context.Context, itr int32) (err error) {
  var _args8 RpcServiceDbRemoveI64Args
  _args8.Itr = itr
  var _result9 RpcServiceDbRemoveI64Result
  if err = p.c.Call(ctx, "db_remove_i64", &_args8, &_result9); err != nil {
    return
  }
  return nil
}

// Parameters:
//  - Itr
func (p *RpcServiceClient) DbGetI64(ctx context.Context, itr int32) (r []byte, err error) {
  var _args10 RpcServiceDbGetI64Args
  _args10.Itr = itr
  var _result11 RpcServiceDbGetI64Result
  if err = p.c.Call(ctx, "db_get_i64", &_args10, &_result11); err != nil {
    return
  }
  return _result11.GetSuccess(), nil
}

// Parameters:
//  - Itr
func (p *RpcServiceClient) DbNextI64(ctx context.Context, itr int32) (r *Result_, err error) {
  var _args12 RpcServiceDbNextI64Args
  _args12.Itr = itr
  var _result13 RpcServiceDbNextI64Result
  if err = p.c.Call(ctx, "db_next_i64", &_args12, &_result13); err != nil {
    return
  }
  return _result13.GetSuccess(), nil
}

// Parameters:
//  - Itr
func (p *RpcServiceClient) DbPreviousI64(ctx context.Context, itr int32) (r *Result_, err error) {
  var _args14 RpcServiceDbPreviousI64Args
  _args14.Itr = itr
  var _result15 RpcServiceDbPreviousI64Result
  if err = p.c.Call(ctx, "db_previous_i64", &_args14, &_result15); err != nil {
    return
  }
  return _result15.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - Scope
//  - Table
//  - ID
func (p *RpcServiceClient) DbFindI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error) {
  var _args16 RpcServiceDbFindI64Args
  _args16.Code = code
  _args16.Scope = scope
  _args16.Table = table
  _args16.ID = id
  var _result17 RpcServiceDbFindI64Result
  if err = p.c.Call(ctx, "db_find_i64", &_args16, &_result17); err != nil {
    return
  }
  return _result17.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - Scope
//  - Table
//  - ID
func (p *RpcServiceClient) DbLowerboundI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error) {
  var _args18 RpcServiceDbLowerboundI64Args
  _args18.Code = code
  _args18.Scope = scope
  _args18.Table = table
  _args18.ID = id
  var _result19 RpcServiceDbLowerboundI64Result
  if err = p.c.Call(ctx, "db_lowerbound_i64", &_args18, &_result19); err != nil {
    return
  }
  return _result19.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - Scope
//  - Table
//  - ID
func (p *RpcServiceClient) DbUpperboundI64(ctx context.Context, code int64, scope int64, table int64, id int64) (r int32, err error) {
  var _args20 RpcServiceDbUpperboundI64Args
  _args20.Code = code
  _args20.Scope = scope
  _args20.Table = table
  _args20.ID = id
  var _result21 RpcServiceDbUpperboundI64Result
  if err = p.c.Call(ctx, "db_upperbound_i64", &_args20, &_result21); err != nil {
    return
  }
  return _result21.GetSuccess(), nil
}

// Parameters:
//  - Code
//  - Scope
//  - Table
func (p *RpcServiceClient) DbEndI64(ctx context.Context, code int64, scope int64, table int64) (r int32, err error) {
  var _args22 RpcServiceDbEndI64Args
  _args22.Code = code
  _args22.Scope = scope
  _args22.Table = table
  var _result23 RpcServiceDbEndI64Result
  if err = p.c.Call(ctx, "db_end_i64", &_args22, &_result23); err != nil {
    return
  }
  return _result23.GetSuccess(), nil
}

type RpcServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RpcService
}

func (p *RpcServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RpcServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RpcServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRpcServiceProcessor(handler RpcService) *RpcServiceProcessor {

  self24 := &RpcServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self24.processorMap["funCall"] = &rpcServiceProcessorFunCall{handler:handler}
  self24.processorMap["read_action"] = &rpcServiceProcessorReadAction{handler:handler}
  self24.processorMap["db_store_i64"] = &rpcServiceProcessorDbStoreI64{handler:handler}
  self24.processorMap["db_update_i64"] = &rpcServiceProcessorDbUpdateI64{handler:handler}
  self24.processorMap["db_remove_i64"] = &rpcServiceProcessorDbRemoveI64{handler:handler}
  self24.processorMap["db_get_i64"] = &rpcServiceProcessorDbGetI64{handler:handler}
  self24.processorMap["db_next_i64"] = &rpcServiceProcessorDbNextI64{handler:handler}
  self24.processorMap["db_previous_i64"] = &rpcServiceProcessorDbPreviousI64{handler:handler}
  self24.processorMap["db_find_i64"] = &rpcServiceProcessorDbFindI64{handler:handler}
  self24.processorMap["db_lowerbound_i64"] = &rpcServiceProcessorDbLowerboundI64{handler:handler}
  self24.processorMap["db_upperbound_i64"] = &rpcServiceProcessorDbUpperboundI64{handler:handler}
  self24.processorMap["db_end_i64"] = &rpcServiceProcessorDbEndI64{handler:handler}
return self24
}

func (p *RpcServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x25 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x25.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x25

}

type rpcServiceProcessorFunCall struct {
  handler RpcService
}

func (p *rpcServiceProcessorFunCall) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceFunCallArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("funCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceFunCallResult{}
var retval []string
  var err2 error
  if retval, err2 = p.handler.FunCall(ctx, args.CallTime, args.FunCode, args.ParamMap); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing funCall: " + err2.Error())
    oprot.WriteMessageBegin("funCall", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("funCall", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorReadAction struct {
  handler RpcService
}

func (p *rpcServiceProcessorReadAction) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceReadActionArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("read_action", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceReadActionResult{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.ReadAction(ctx); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing read_action: " + err2.Error())
    oprot.WriteMessageBegin("read_action", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("read_action", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbStoreI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbStoreI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbStoreI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_store_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbStoreI64Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.DbStoreI64(ctx, args.Scope, args.Table, args.Payer, args.ID, args.Buffer); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_store_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_store_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("db_store_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbUpdateI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbUpdateI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbUpdateI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_update_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbUpdateI64Result{}
  var err2 error
  if err2 = p.handler.DbUpdateI64(ctx, args.Itr, args.Payer, args.Buffer); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_update_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_update_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("db_update_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbRemoveI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbRemoveI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbRemoveI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_remove_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbRemoveI64Result{}
  var err2 error
  if err2 = p.handler.DbRemoveI64(ctx, args.Itr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_remove_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_remove_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  }
  if err2 = oprot.WriteMessageBegin("db_remove_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbGetI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbGetI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbGetI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_get_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbGetI64Result{}
var retval []byte
  var err2 error
  if retval, err2 = p.handler.DbGetI64(ctx, args.Itr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_get_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_get_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("db_get_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbNextI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbNextI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbNextI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_next_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbNextI64Result{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.DbNextI64(ctx, args.Itr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_next_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_next_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("db_next_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbPreviousI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbPreviousI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbPreviousI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_previous_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbPreviousI64Result{}
var retval *Result_
  var err2 error
  if retval, err2 = p.handler.DbPreviousI64(ctx, args.Itr); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_previous_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_previous_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("db_previous_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbFindI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbFindI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbFindI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_find_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbFindI64Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.DbFindI64(ctx, args.Code, args.Scope, args.Table, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_find_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_find_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("db_find_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbLowerboundI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbLowerboundI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbLowerboundI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_lowerbound_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbLowerboundI64Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.DbLowerboundI64(ctx, args.Code, args.Scope, args.Table, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_lowerbound_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_lowerbound_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("db_lowerbound_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbUpperboundI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbUpperboundI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbUpperboundI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_upperbound_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbUpperboundI64Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.DbUpperboundI64(ctx, args.Code, args.Scope, args.Table, args.ID); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_upperbound_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_upperbound_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("db_upperbound_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type rpcServiceProcessorDbEndI64 struct {
  handler RpcService
}

func (p *rpcServiceProcessorDbEndI64) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcServiceDbEndI64Args{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("db_end_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcServiceDbEndI64Result{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.DbEndI64(ctx, args.Code, args.Scope, args.Table); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing db_end_i64: " + err2.Error())
    oprot.WriteMessageBegin("db_end_i64", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("db_end_i64", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - CallTime
//  - FunCode
//  - ParamMap
type RpcServiceFunCallArgs struct {
  CallTime int64 `thrift:"callTime,1" db:"callTime" json:"callTime"`
  FunCode string `thrift:"funCode,2" db:"funCode" json:"funCode"`
  ParamMap map[string]string `thrift:"paramMap,3" db:"paramMap" json:"paramMap"`
}

func NewRpcServiceFunCallArgs() *RpcServiceFunCallArgs {
  return &RpcServiceFunCallArgs{}
}


func (p *RpcServiceFunCallArgs) GetCallTime() int64 {
  return p.CallTime
}

func (p *RpcServiceFunCallArgs) GetFunCode() string {
  return p.FunCode
}

func (p *RpcServiceFunCallArgs) GetParamMap() map[string]string {
  return p.ParamMap
}
func (p *RpcServiceFunCallArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.MAP {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceFunCallArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CallTime = v
}
  return nil
}

func (p *RpcServiceFunCallArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FunCode = v
}
  return nil
}

func (p *RpcServiceFunCallArgs)  ReadField3(iprot thrift.TProtocol) error {
  _, _, size, err := iprot.ReadMapBegin()
  if err != nil {
    return thrift.PrependError("error reading map begin: ", err)
  }
  tMap := make(map[string]string, size)
  p.ParamMap =  tMap
  for i := 0; i < size; i ++ {
var _key26 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _key26 = v
}
var _val27 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _val27 = v
}
    p.ParamMap[_key26] = _val27
  }
  if err := iprot.ReadMapEnd(); err != nil {
    return thrift.PrependError("error reading map end: ", err)
  }
  return nil
}

func (p *RpcServiceFunCallArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("funCall_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceFunCallArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("callTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:callTime: ", p), err) }
  if err := oprot.WriteI64(int64(p.CallTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.callTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:callTime: ", p), err) }
  return err
}

func (p *RpcServiceFunCallArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("funCode", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:funCode: ", p), err) }
  if err := oprot.WriteString(string(p.FunCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.funCode (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:funCode: ", p), err) }
  return err
}

func (p *RpcServiceFunCallArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("paramMap", thrift.MAP, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:paramMap: ", p), err) }
  if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.ParamMap)); err != nil {
    return thrift.PrependError("error writing map begin: ", err)
  }
  for k, v := range p.ParamMap {
    if err := oprot.WriteString(string(k)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    if err := oprot.WriteString(string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteMapEnd(); err != nil {
    return thrift.PrependError("error writing map end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:paramMap: ", p), err) }
  return err
}

func (p *RpcServiceFunCallArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceFunCallArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceFunCallResult struct {
  Success []string `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceFunCallResult() *RpcServiceFunCallResult {
  return &RpcServiceFunCallResult{}
}

var RpcServiceFunCallResult_Success_DEFAULT []string

func (p *RpcServiceFunCallResult) GetSuccess() []string {
  return p.Success
}
func (p *RpcServiceFunCallResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceFunCallResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceFunCallResult)  ReadField0(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.Success =  tSlice
  for i := 0; i < size; i ++ {
var _elem28 string
    if v, err := iprot.ReadString(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem28 = v
}
    p.Success = append(p.Success, _elem28)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *RpcServiceFunCallResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("funCall_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceFunCallResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.LIST, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteListBegin(thrift.STRING, len(p.Success)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Success {
      if err := oprot.WriteString(string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceFunCallResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceFunCallResult(%+v)", *p)
}

type RpcServiceReadActionArgs struct {
}

func NewRpcServiceReadActionArgs() *RpcServiceReadActionArgs {
  return &RpcServiceReadActionArgs{}
}

func (p *RpcServiceReadActionArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceReadActionArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("read_action_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceReadActionArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceReadActionArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceReadActionResult struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceReadActionResult() *RpcServiceReadActionResult {
  return &RpcServiceReadActionResult{}
}

var RpcServiceReadActionResult_Success_DEFAULT []byte

func (p *RpcServiceReadActionResult) GetSuccess() []byte {
  return p.Success
}
func (p *RpcServiceReadActionResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceReadActionResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceReadActionResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *RpcServiceReadActionResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("read_action_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceReadActionResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceReadActionResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceReadActionResult(%+v)", *p)
}

// Attributes:
//  - Scope
//  - Table
//  - Payer
//  - ID
//  - Buffer
type RpcServiceDbStoreI64Args struct {
  Scope int64 `thrift:"scope,1" db:"scope" json:"scope"`
  Table int64 `thrift:"table,2" db:"table" json:"table"`
  Payer int64 `thrift:"payer,3" db:"payer" json:"payer"`
  ID int64 `thrift:"id,4" db:"id" json:"id"`
  Buffer []byte `thrift:"buffer,5" db:"buffer" json:"buffer"`
}

func NewRpcServiceDbStoreI64Args() *RpcServiceDbStoreI64Args {
  return &RpcServiceDbStoreI64Args{}
}


func (p *RpcServiceDbStoreI64Args) GetScope() int64 {
  return p.Scope
}

func (p *RpcServiceDbStoreI64Args) GetTable() int64 {
  return p.Table
}

func (p *RpcServiceDbStoreI64Args) GetPayer() int64 {
  return p.Payer
}

func (p *RpcServiceDbStoreI64Args) GetID() int64 {
  return p.ID
}

func (p *RpcServiceDbStoreI64Args) GetBuffer() []byte {
  return p.Buffer
}
func (p *RpcServiceDbStoreI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbStoreI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *RpcServiceDbStoreI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *RpcServiceDbStoreI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Payer = v
}
  return nil
}

func (p *RpcServiceDbStoreI64Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RpcServiceDbStoreI64Args)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Buffer = v
}
  return nil
}

func (p *RpcServiceDbStoreI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_store_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbStoreI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:scope: ", p), err) }
  if err := oprot.WriteI64(int64(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:scope: ", p), err) }
  return err
}

func (p *RpcServiceDbStoreI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:table: ", p), err) }
  if err := oprot.WriteI64(int64(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:table: ", p), err) }
  return err
}

func (p *RpcServiceDbStoreI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payer", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:payer: ", p), err) }
  if err := oprot.WriteI64(int64(p.Payer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payer (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:payer: ", p), err) }
  return err
}

func (p *RpcServiceDbStoreI64Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *RpcServiceDbStoreI64Args) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buffer", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:buffer: ", p), err) }
  if err := oprot.WriteBinary(p.Buffer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buffer (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:buffer: ", p), err) }
  return err
}

func (p *RpcServiceDbStoreI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbStoreI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbStoreI64Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbStoreI64Result() *RpcServiceDbStoreI64Result {
  return &RpcServiceDbStoreI64Result{}
}

var RpcServiceDbStoreI64Result_Success_DEFAULT int32
func (p *RpcServiceDbStoreI64Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcServiceDbStoreI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcServiceDbStoreI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbStoreI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbStoreI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcServiceDbStoreI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_store_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbStoreI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbStoreI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbStoreI64Result(%+v)", *p)
}

// Attributes:
//  - Itr
//  - Payer
//  - Buffer
type RpcServiceDbUpdateI64Args struct {
  Itr int32 `thrift:"itr,1" db:"itr" json:"itr"`
  Payer int64 `thrift:"payer,2" db:"payer" json:"payer"`
  Buffer []byte `thrift:"buffer,3" db:"buffer" json:"buffer"`
}

func NewRpcServiceDbUpdateI64Args() *RpcServiceDbUpdateI64Args {
  return &RpcServiceDbUpdateI64Args{}
}


func (p *RpcServiceDbUpdateI64Args) GetItr() int32 {
  return p.Itr
}

func (p *RpcServiceDbUpdateI64Args) GetPayer() int64 {
  return p.Payer
}

func (p *RpcServiceDbUpdateI64Args) GetBuffer() []byte {
  return p.Buffer
}
func (p *RpcServiceDbUpdateI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbUpdateI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Itr = v
}
  return nil
}

func (p *RpcServiceDbUpdateI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Payer = v
}
  return nil
}

func (p *RpcServiceDbUpdateI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Buffer = v
}
  return nil
}

func (p *RpcServiceDbUpdateI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_update_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbUpdateI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itr", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Itr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itr: ", p), err) }
  return err
}

func (p *RpcServiceDbUpdateI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("payer", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:payer: ", p), err) }
  if err := oprot.WriteI64(int64(p.Payer)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payer (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:payer: ", p), err) }
  return err
}

func (p *RpcServiceDbUpdateI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("buffer", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:buffer: ", p), err) }
  if err := oprot.WriteBinary(p.Buffer); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.buffer (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:buffer: ", p), err) }
  return err
}

func (p *RpcServiceDbUpdateI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbUpdateI64Args(%+v)", *p)
}

type RpcServiceDbUpdateI64Result struct {
}

func NewRpcServiceDbUpdateI64Result() *RpcServiceDbUpdateI64Result {
  return &RpcServiceDbUpdateI64Result{}
}

func (p *RpcServiceDbUpdateI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbUpdateI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_update_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbUpdateI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbUpdateI64Result(%+v)", *p)
}

// Attributes:
//  - Itr
type RpcServiceDbRemoveI64Args struct {
  Itr int32 `thrift:"itr,1" db:"itr" json:"itr"`
}

func NewRpcServiceDbRemoveI64Args() *RpcServiceDbRemoveI64Args {
  return &RpcServiceDbRemoveI64Args{}
}


func (p *RpcServiceDbRemoveI64Args) GetItr() int32 {
  return p.Itr
}
func (p *RpcServiceDbRemoveI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbRemoveI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Itr = v
}
  return nil
}

func (p *RpcServiceDbRemoveI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_remove_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbRemoveI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itr", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Itr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itr: ", p), err) }
  return err
}

func (p *RpcServiceDbRemoveI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbRemoveI64Args(%+v)", *p)
}

type RpcServiceDbRemoveI64Result struct {
}

func NewRpcServiceDbRemoveI64Result() *RpcServiceDbRemoveI64Result {
  return &RpcServiceDbRemoveI64Result{}
}

func (p *RpcServiceDbRemoveI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbRemoveI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_remove_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbRemoveI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbRemoveI64Result(%+v)", *p)
}

// Attributes:
//  - Itr
type RpcServiceDbGetI64Args struct {
  Itr int32 `thrift:"itr,1" db:"itr" json:"itr"`
}

func NewRpcServiceDbGetI64Args() *RpcServiceDbGetI64Args {
  return &RpcServiceDbGetI64Args{}
}


func (p *RpcServiceDbGetI64Args) GetItr() int32 {
  return p.Itr
}
func (p *RpcServiceDbGetI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbGetI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Itr = v
}
  return nil
}

func (p *RpcServiceDbGetI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_get_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbGetI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itr", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Itr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itr: ", p), err) }
  return err
}

func (p *RpcServiceDbGetI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbGetI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbGetI64Result struct {
  Success []byte `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbGetI64Result() *RpcServiceDbGetI64Result {
  return &RpcServiceDbGetI64Result{}
}

var RpcServiceDbGetI64Result_Success_DEFAULT []byte

func (p *RpcServiceDbGetI64Result) GetSuccess() []byte {
  return p.Success
}
func (p *RpcServiceDbGetI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbGetI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbGetI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *RpcServiceDbGetI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_get_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbGetI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteBinary(p.Success); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbGetI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbGetI64Result(%+v)", *p)
}

// Attributes:
//  - Itr
type RpcServiceDbNextI64Args struct {
  Itr int32 `thrift:"itr,1" db:"itr" json:"itr"`
}

func NewRpcServiceDbNextI64Args() *RpcServiceDbNextI64Args {
  return &RpcServiceDbNextI64Args{}
}


func (p *RpcServiceDbNextI64Args) GetItr() int32 {
  return p.Itr
}
func (p *RpcServiceDbNextI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbNextI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Itr = v
}
  return nil
}

func (p *RpcServiceDbNextI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_next_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbNextI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itr", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Itr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itr: ", p), err) }
  return err
}

func (p *RpcServiceDbNextI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbNextI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbNextI64Result struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbNextI64Result() *RpcServiceDbNextI64Result {
  return &RpcServiceDbNextI64Result{}
}

var RpcServiceDbNextI64Result_Success_DEFAULT *Result_
func (p *RpcServiceDbNextI64Result) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return RpcServiceDbNextI64Result_Success_DEFAULT
  }
return p.Success
}
func (p *RpcServiceDbNextI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbNextI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbNextI64Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RpcServiceDbNextI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_next_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbNextI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbNextI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbNextI64Result(%+v)", *p)
}

// Attributes:
//  - Itr
type RpcServiceDbPreviousI64Args struct {
  Itr int32 `thrift:"itr,1" db:"itr" json:"itr"`
}

func NewRpcServiceDbPreviousI64Args() *RpcServiceDbPreviousI64Args {
  return &RpcServiceDbPreviousI64Args{}
}


func (p *RpcServiceDbPreviousI64Args) GetItr() int32 {
  return p.Itr
}
func (p *RpcServiceDbPreviousI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbPreviousI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Itr = v
}
  return nil
}

func (p *RpcServiceDbPreviousI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_previous_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbPreviousI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("itr", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:itr: ", p), err) }
  if err := oprot.WriteI32(int32(p.Itr)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.itr (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:itr: ", p), err) }
  return err
}

func (p *RpcServiceDbPreviousI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbPreviousI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbPreviousI64Result struct {
  Success *Result_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbPreviousI64Result() *RpcServiceDbPreviousI64Result {
  return &RpcServiceDbPreviousI64Result{}
}

var RpcServiceDbPreviousI64Result_Success_DEFAULT *Result_
func (p *RpcServiceDbPreviousI64Result) GetSuccess() *Result_ {
  if !p.IsSetSuccess() {
    return RpcServiceDbPreviousI64Result_Success_DEFAULT
  }
return p.Success
}
func (p *RpcServiceDbPreviousI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbPreviousI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbPreviousI64Result)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &Result_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *RpcServiceDbPreviousI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_previous_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbPreviousI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbPreviousI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbPreviousI64Result(%+v)", *p)
}

// Attributes:
//  - Code
//  - Scope
//  - Table
//  - ID
type RpcServiceDbFindI64Args struct {
  Code int64 `thrift:"code,1" db:"code" json:"code"`
  Scope int64 `thrift:"scope,2" db:"scope" json:"scope"`
  Table int64 `thrift:"table,3" db:"table" json:"table"`
  ID int64 `thrift:"id,4" db:"id" json:"id"`
}

func NewRpcServiceDbFindI64Args() *RpcServiceDbFindI64Args {
  return &RpcServiceDbFindI64Args{}
}


func (p *RpcServiceDbFindI64Args) GetCode() int64 {
  return p.Code
}

func (p *RpcServiceDbFindI64Args) GetScope() int64 {
  return p.Scope
}

func (p *RpcServiceDbFindI64Args) GetTable() int64 {
  return p.Table
}

func (p *RpcServiceDbFindI64Args) GetID() int64 {
  return p.ID
}
func (p *RpcServiceDbFindI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbFindI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RpcServiceDbFindI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *RpcServiceDbFindI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *RpcServiceDbFindI64Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RpcServiceDbFindI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_find_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbFindI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RpcServiceDbFindI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scope: ", p), err) }
  if err := oprot.WriteI64(int64(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scope: ", p), err) }
  return err
}

func (p *RpcServiceDbFindI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err) }
  if err := oprot.WriteI64(int64(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err) }
  return err
}

func (p *RpcServiceDbFindI64Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *RpcServiceDbFindI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbFindI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbFindI64Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbFindI64Result() *RpcServiceDbFindI64Result {
  return &RpcServiceDbFindI64Result{}
}

var RpcServiceDbFindI64Result_Success_DEFAULT int32
func (p *RpcServiceDbFindI64Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcServiceDbFindI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcServiceDbFindI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbFindI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbFindI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcServiceDbFindI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_find_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbFindI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbFindI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbFindI64Result(%+v)", *p)
}

// Attributes:
//  - Code
//  - Scope
//  - Table
//  - ID
type RpcServiceDbLowerboundI64Args struct {
  Code int64 `thrift:"code,1" db:"code" json:"code"`
  Scope int64 `thrift:"scope,2" db:"scope" json:"scope"`
  Table int64 `thrift:"table,3" db:"table" json:"table"`
  ID int64 `thrift:"id,4" db:"id" json:"id"`
}

func NewRpcServiceDbLowerboundI64Args() *RpcServiceDbLowerboundI64Args {
  return &RpcServiceDbLowerboundI64Args{}
}


func (p *RpcServiceDbLowerboundI64Args) GetCode() int64 {
  return p.Code
}

func (p *RpcServiceDbLowerboundI64Args) GetScope() int64 {
  return p.Scope
}

func (p *RpcServiceDbLowerboundI64Args) GetTable() int64 {
  return p.Table
}

func (p *RpcServiceDbLowerboundI64Args) GetID() int64 {
  return p.ID
}
func (p *RpcServiceDbLowerboundI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbLowerboundI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RpcServiceDbLowerboundI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *RpcServiceDbLowerboundI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *RpcServiceDbLowerboundI64Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RpcServiceDbLowerboundI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_lowerbound_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbLowerboundI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RpcServiceDbLowerboundI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scope: ", p), err) }
  if err := oprot.WriteI64(int64(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scope: ", p), err) }
  return err
}

func (p *RpcServiceDbLowerboundI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err) }
  if err := oprot.WriteI64(int64(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err) }
  return err
}

func (p *RpcServiceDbLowerboundI64Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *RpcServiceDbLowerboundI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbLowerboundI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbLowerboundI64Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbLowerboundI64Result() *RpcServiceDbLowerboundI64Result {
  return &RpcServiceDbLowerboundI64Result{}
}

var RpcServiceDbLowerboundI64Result_Success_DEFAULT int32
func (p *RpcServiceDbLowerboundI64Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcServiceDbLowerboundI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcServiceDbLowerboundI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbLowerboundI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbLowerboundI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcServiceDbLowerboundI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_lowerbound_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbLowerboundI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbLowerboundI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbLowerboundI64Result(%+v)", *p)
}

// Attributes:
//  - Code
//  - Scope
//  - Table
//  - ID
type RpcServiceDbUpperboundI64Args struct {
  Code int64 `thrift:"code,1" db:"code" json:"code"`
  Scope int64 `thrift:"scope,2" db:"scope" json:"scope"`
  Table int64 `thrift:"table,3" db:"table" json:"table"`
  ID int64 `thrift:"id,4" db:"id" json:"id"`
}

func NewRpcServiceDbUpperboundI64Args() *RpcServiceDbUpperboundI64Args {
  return &RpcServiceDbUpperboundI64Args{}
}


func (p *RpcServiceDbUpperboundI64Args) GetCode() int64 {
  return p.Code
}

func (p *RpcServiceDbUpperboundI64Args) GetScope() int64 {
  return p.Scope
}

func (p *RpcServiceDbUpperboundI64Args) GetTable() int64 {
  return p.Table
}

func (p *RpcServiceDbUpperboundI64Args) GetID() int64 {
  return p.ID
}
func (p *RpcServiceDbUpperboundI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbUpperboundI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RpcServiceDbUpperboundI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *RpcServiceDbUpperboundI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *RpcServiceDbUpperboundI64Args)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *RpcServiceDbUpperboundI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_upperbound_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbUpperboundI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RpcServiceDbUpperboundI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scope: ", p), err) }
  if err := oprot.WriteI64(int64(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scope: ", p), err) }
  return err
}

func (p *RpcServiceDbUpperboundI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err) }
  if err := oprot.WriteI64(int64(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err) }
  return err
}

func (p *RpcServiceDbUpperboundI64Args) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("id", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:id: ", p), err) }
  if err := oprot.WriteI64(int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:id: ", p), err) }
  return err
}

func (p *RpcServiceDbUpperboundI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbUpperboundI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbUpperboundI64Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbUpperboundI64Result() *RpcServiceDbUpperboundI64Result {
  return &RpcServiceDbUpperboundI64Result{}
}

var RpcServiceDbUpperboundI64Result_Success_DEFAULT int32
func (p *RpcServiceDbUpperboundI64Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcServiceDbUpperboundI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcServiceDbUpperboundI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbUpperboundI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbUpperboundI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcServiceDbUpperboundI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_upperbound_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbUpperboundI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbUpperboundI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbUpperboundI64Result(%+v)", *p)
}

// Attributes:
//  - Code
//  - Scope
//  - Table
type RpcServiceDbEndI64Args struct {
  Code int64 `thrift:"code,1" db:"code" json:"code"`
  Scope int64 `thrift:"scope,2" db:"scope" json:"scope"`
  Table int64 `thrift:"table,3" db:"table" json:"table"`
}

func NewRpcServiceDbEndI64Args() *RpcServiceDbEndI64Args {
  return &RpcServiceDbEndI64Args{}
}


func (p *RpcServiceDbEndI64Args) GetCode() int64 {
  return p.Code
}

func (p *RpcServiceDbEndI64Args) GetScope() int64 {
  return p.Scope
}

func (p *RpcServiceDbEndI64Args) GetTable() int64 {
  return p.Table
}
func (p *RpcServiceDbEndI64Args) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbEndI64Args)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *RpcServiceDbEndI64Args)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Scope = v
}
  return nil
}

func (p *RpcServiceDbEndI64Args)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *RpcServiceDbEndI64Args) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_end_i64_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbEndI64Args) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("code", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI64(int64(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *RpcServiceDbEndI64Args) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("scope", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:scope: ", p), err) }
  if err := oprot.WriteI64(int64(p.Scope)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.scope (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:scope: ", p), err) }
  return err
}

func (p *RpcServiceDbEndI64Args) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("table", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:table: ", p), err) }
  if err := oprot.WriteI64(int64(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:table: ", p), err) }
  return err
}

func (p *RpcServiceDbEndI64Args) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbEndI64Args(%+v)", *p)
}

// Attributes:
//  - Success
type RpcServiceDbEndI64Result struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcServiceDbEndI64Result() *RpcServiceDbEndI64Result {
  return &RpcServiceDbEndI64Result{}
}

var RpcServiceDbEndI64Result_Success_DEFAULT int32
func (p *RpcServiceDbEndI64Result) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcServiceDbEndI64Result_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcServiceDbEndI64Result) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcServiceDbEndI64Result) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcServiceDbEndI64Result)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcServiceDbEndI64Result) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("db_end_i64_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcServiceDbEndI64Result) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcServiceDbEndI64Result) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcServiceDbEndI64Result(%+v)", *p)
}


type RpcInterface interface {
  // Parameters:
  //  - Account
  //  - Action
  Apply(ctx context.Context, account int64, action int64) (r int32, err error)
}

type RpcInterfaceClient struct {
  c thrift.TClient
}

// Deprecated: Use NewRpcInterface instead
func NewRpcInterfaceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *RpcInterfaceClient {
  return &RpcInterfaceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewRpcInterface instead
func NewRpcInterfaceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *RpcInterfaceClient {
  return &RpcInterfaceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewRpcInterfaceClient(c thrift.TClient) *RpcInterfaceClient {
  return &RpcInterfaceClient{
    c: c,
  }
}

// Parameters:
//  - Account
//  - Action
func (p *RpcInterfaceClient) Apply(ctx context.Context, account int64, action int64) (r int32, err error) {
  var _args64 RpcInterfaceApplyArgs
  _args64.Account = account
  _args64.Action = action
  var _result65 RpcInterfaceApplyResult
  if err = p.c.Call(ctx, "apply", &_args64, &_result65); err != nil {
    return
  }
  return _result65.GetSuccess(), nil
}

type RpcInterfaceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler RpcInterface
}

func (p *RpcInterfaceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *RpcInterfaceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *RpcInterfaceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewRpcInterfaceProcessor(handler RpcInterface) *RpcInterfaceProcessor {

  self66 := &RpcInterfaceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self66.processorMap["apply"] = &rpcInterfaceProcessorApply{handler:handler}
return self66
}

func (p *RpcInterfaceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x67 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x67.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x67

}

type rpcInterfaceProcessorApply struct {
  handler RpcInterface
}

func (p *rpcInterfaceProcessorApply) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := RpcInterfaceApplyArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("apply", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := RpcInterfaceApplyResult{}
var retval int32
  var err2 error
  if retval, err2 = p.handler.Apply(ctx, args.Account, args.Action); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing apply: " + err2.Error())
    oprot.WriteMessageBegin("apply", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = &retval
}
  if err2 = oprot.WriteMessageBegin("apply", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Account
//  - Action
type RpcInterfaceApplyArgs struct {
  Account int64 `thrift:"account,1" db:"account" json:"account"`
  Action int64 `thrift:"action,2" db:"action" json:"action"`
}

func NewRpcInterfaceApplyArgs() *RpcInterfaceApplyArgs {
  return &RpcInterfaceApplyArgs{}
}


func (p *RpcInterfaceApplyArgs) GetAccount() int64 {
  return p.Account
}

func (p *RpcInterfaceApplyArgs) GetAction() int64 {
  return p.Action
}
func (p *RpcInterfaceApplyArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcInterfaceApplyArgs)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Account = v
}
  return nil
}

func (p *RpcInterfaceApplyArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Action = v
}
  return nil
}

func (p *RpcInterfaceApplyArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("apply_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcInterfaceApplyArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("account", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:account: ", p), err) }
  if err := oprot.WriteI64(int64(p.Account)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.account (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:account: ", p), err) }
  return err
}

func (p *RpcInterfaceApplyArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("action", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:action: ", p), err) }
  if err := oprot.WriteI64(int64(p.Action)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.action (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:action: ", p), err) }
  return err
}

func (p *RpcInterfaceApplyArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcInterfaceApplyArgs(%+v)", *p)
}

// Attributes:
//  - Success
type RpcInterfaceApplyResult struct {
  Success *int32 `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewRpcInterfaceApplyResult() *RpcInterfaceApplyResult {
  return &RpcInterfaceApplyResult{}
}

var RpcInterfaceApplyResult_Success_DEFAULT int32
func (p *RpcInterfaceApplyResult) GetSuccess() int32 {
  if !p.IsSetSuccess() {
    return RpcInterfaceApplyResult_Success_DEFAULT
  }
return *p.Success
}
func (p *RpcInterfaceApplyResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *RpcInterfaceApplyResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *RpcInterfaceApplyResult)  ReadField0(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 0: ", err)
} else {
  p.Success = &v
}
  return nil
}

func (p *RpcInterfaceApplyResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("apply_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *RpcInterfaceApplyResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.I32, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := oprot.WriteI32(int32(*p.Success)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *RpcInterfaceApplyResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("RpcInterfaceApplyResult(%+v)", *p)
}


