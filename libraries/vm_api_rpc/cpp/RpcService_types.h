/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcService_TYPES_H
#define RpcService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace cpp {

class Result;

class Apply;

class ApplyResult;

typedef struct _Result__isset {
  _Result__isset() : status(true), value(false) {}
  bool status :1;
  bool value :1;
} _Result__isset;

class Result : public virtual ::apache::thrift::TBase {
 public:

  Result(const Result&);
  Result& operator=(const Result&);
  Result() : status(0), value() {
  }

  virtual ~Result() throw();
  int32_t status;
  std::string value;

  _Result__isset __isset;

  void __set_status(const int32_t val);

  void __set_value(const std::string& val);

  bool operator == (const Result & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

std::ostream& operator<<(std::ostream& out, const Result& obj);

typedef struct _Apply__isset {
  _Apply__isset() : receiver(false), account(false), action(false) {}
  bool receiver :1;
  bool account :1;
  bool action :1;
} _Apply__isset;

class Apply : public virtual ::apache::thrift::TBase {
 public:

  Apply(const Apply&);
  Apply& operator=(const Apply&);
  Apply() : receiver(0), account(0), action(0) {
  }

  virtual ~Apply() throw();
  int64_t receiver;
  int64_t account;
  int64_t action;

  _Apply__isset __isset;

  void __set_receiver(const int64_t val);

  void __set_account(const int64_t val);

  void __set_action(const int64_t val);

  bool operator == (const Apply & rhs) const
  {
    if (!(receiver == rhs.receiver))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const Apply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Apply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Apply &a, Apply &b);

std::ostream& operator<<(std::ostream& out, const Apply& obj);

typedef struct _ApplyResult__isset {
  _ApplyResult__isset() : status(true), err(false) {}
  bool status :1;
  bool err :1;
} _ApplyResult__isset;

class ApplyResult : public virtual ::apache::thrift::TBase {
 public:

  ApplyResult(const ApplyResult&);
  ApplyResult& operator=(const ApplyResult&);
  ApplyResult() : status(0), err() {
  }

  virtual ~ApplyResult() throw();
  int32_t status;
  std::string err;

  _ApplyResult__isset __isset;

  void __set_status(const int32_t val);

  void __set_err(const std::string& val);

  bool operator == (const ApplyResult & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const ApplyResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ApplyResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ApplyResult &a, ApplyResult &b);

std::ostream& operator<<(std::ostream& out, const ApplyResult& obj);

} // namespace

#endif
