// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "RpcService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include <thrift/transport/TSocket.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::cpp;

class RpcServiceHandler : virtual public RpcServiceIf {
 public:
  RpcServiceHandler() {
    // Your initialization goes here
  }

  void apply_request(Apply& _return) {
    // Your implementation goes here
    printf("apply_request\n");
  }

  void apply_finish(const int32_t status, const std::string& errMsg) {
    // Your implementation goes here
    printf("apply_finish\n");
  }

  void funCall(std::vector<std::string> & _return, const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap) {
    // Your implementation goes here
    printf("funCall\n");
  }

  void read_action(std::string& _return) {
    // Your implementation goes here
    printf("read_action\n");
  }

  int32_t db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer) {
    // Your implementation goes here
    printf("db_store_i64\n");
  }

  void db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer) {
    // Your implementation goes here
    printf("db_update_i64\n");
  }

  void db_remove_i64(const int32_t itr) {
    // Your implementation goes here
    printf("db_remove_i64\n");
  }

  void db_get_i64(std::string& _return, const int32_t itr) {
    // Your implementation goes here
    printf("db_get_i64\n");
  }

  void db_next_i64(Result& _return, const int32_t itr) {
    // Your implementation goes here
    printf("db_next_i64\n");
  }

  void db_previous_i64(Result& _return, const int32_t itr) {
    // Your implementation goes here
    printf("db_previous_i64\n");
  }

  int32_t db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    // Your implementation goes here
    printf("db_find_i64\n");
  }

  int32_t db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    // Your implementation goes here
    printf("db_lowerbound_i64\n");
  }

  int32_t db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    // Your implementation goes here
    printf("db_upperbound_i64\n");
  }

  int32_t db_end_i64(const int64_t code, const int64_t scope, const int64_t table) {
    // Your implementation goes here
    printf("db_end_i64\n");
  }

  void db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer) {
    // Your implementation goes here
    printf("db_update_i64_ex\n");
  }

  void db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id) {
    // Your implementation goes here
    printf("db_remove_i64_ex\n");
  }

};

int start_server() {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<RpcServiceHandler> handler(new RpcServiceHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new RpcServiceProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

int start_client() {
   std::string addr("localhost");
   stdcxx::shared_ptr<TTransport> socket(new TSocket(addr, 9090));
   stdcxx::shared_ptr<TTransport> transport(new TBufferedTransport(socket));
   stdcxx::shared_ptr<TProtocol> protocol(new TBinaryProtocol(transport));
   RpcServiceClient client(protocol);

   try {
     transport->open();
     Apply apply;
     client.apply_request(apply);
   } catch (...) {

   }
   return 0;
}
