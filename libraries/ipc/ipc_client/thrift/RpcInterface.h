/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcInterface_H
#define RpcInterface_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "../../ipc_client/thrift/RpcService_types.h"

namespace cpp {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RpcInterfaceIf {
 public:
  virtual ~RpcInterfaceIf() {}
  virtual int32_t apply(const int64_t receiver, const int64_t account, const int64_t action) = 0;
};

class RpcInterfaceIfFactory {
 public:
  typedef RpcInterfaceIf Handler;

  virtual ~RpcInterfaceIfFactory() {}

  virtual RpcInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RpcInterfaceIf* /* handler */) = 0;
};

class RpcInterfaceIfSingletonFactory : virtual public RpcInterfaceIfFactory {
 public:
  RpcInterfaceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf>& iface) : iface_(iface) {}
  virtual ~RpcInterfaceIfSingletonFactory() {}

  virtual RpcInterfaceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RpcInterfaceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> iface_;
};

class RpcInterfaceNull : virtual public RpcInterfaceIf {
 public:
  virtual ~RpcInterfaceNull() {}
  int32_t apply(const int64_t /* receiver */, const int64_t /* account */, const int64_t /* action */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _RpcInterface_apply_args__isset {
  _RpcInterface_apply_args__isset() : receiver(false), account(false), action(false) {}
  bool receiver :1;
  bool account :1;
  bool action :1;
} _RpcInterface_apply_args__isset;

class RpcInterface_apply_args {
 public:

  RpcInterface_apply_args(const RpcInterface_apply_args&);
  RpcInterface_apply_args& operator=(const RpcInterface_apply_args&);
  RpcInterface_apply_args() : receiver(0), account(0), action(0) {
  }

  virtual ~RpcInterface_apply_args() throw();
  int64_t receiver;
  int64_t account;
  int64_t action;

  _RpcInterface_apply_args__isset __isset;

  void __set_receiver(const int64_t val);

  void __set_account(const int64_t val);

  void __set_action(const int64_t val);

  bool operator == (const RpcInterface_apply_args & rhs) const
  {
    if (!(receiver == rhs.receiver))
      return false;
    if (!(account == rhs.account))
      return false;
    if (!(action == rhs.action))
      return false;
    return true;
  }
  bool operator != (const RpcInterface_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcInterface_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcInterface_apply_pargs {
 public:


  virtual ~RpcInterface_apply_pargs() throw();
  const int64_t* receiver;
  const int64_t* account;
  const int64_t* action;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcInterface_apply_result__isset {
  _RpcInterface_apply_result__isset() : success(false) {}
  bool success :1;
} _RpcInterface_apply_result__isset;

class RpcInterface_apply_result {
 public:

  RpcInterface_apply_result(const RpcInterface_apply_result&);
  RpcInterface_apply_result& operator=(const RpcInterface_apply_result&);
  RpcInterface_apply_result() : success(0) {
  }

  virtual ~RpcInterface_apply_result() throw();
  int32_t success;

  _RpcInterface_apply_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcInterface_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcInterface_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcInterface_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcInterface_apply_presult__isset {
  _RpcInterface_apply_presult__isset() : success(false) {}
  bool success :1;
} _RpcInterface_apply_presult__isset;

class RpcInterface_apply_presult {
 public:


  virtual ~RpcInterface_apply_presult() throw();
  int32_t* success;

  _RpcInterface_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RpcInterfaceClient : virtual public RpcInterfaceIf {
 public:
  RpcInterfaceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcInterfaceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t apply(const int64_t receiver, const int64_t account, const int64_t action);
  void send_apply(const int64_t receiver, const int64_t account, const int64_t action);
  int32_t recv_apply();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RpcInterfaceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RpcInterfaceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_apply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RpcInterfaceProcessor(::apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> iface) :
    iface_(iface) {
    processMap_["apply"] = &RpcInterfaceProcessor::process_apply;
  }

  virtual ~RpcInterfaceProcessor() {}
};

class RpcInterfaceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RpcInterfaceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< RpcInterfaceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< RpcInterfaceIfFactory > handlerFactory_;
};

class RpcInterfaceMultiface : virtual public RpcInterfaceIf {
 public:
  RpcInterfaceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RpcInterfaceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> > ifaces_;
  RpcInterfaceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<RpcInterfaceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t apply(const int64_t receiver, const int64_t account, const int64_t action) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply(receiver, account, action);
    }
    return ifaces_[i]->apply(receiver, account, action);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RpcInterfaceConcurrentClient : virtual public RpcInterfaceIf {
 public:
  RpcInterfaceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcInterfaceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t apply(const int64_t receiver, const int64_t account, const int64_t action);
  int32_t send_apply(const int64_t receiver, const int64_t account, const int64_t action);
  int32_t recv_apply(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
