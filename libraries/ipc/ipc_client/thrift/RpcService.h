/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RpcService_H
#define RpcService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "../../ipc_client/thrift/RpcService_types.h"

namespace cpp {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RpcServiceIf {
 public:
  virtual ~RpcServiceIf() {}
  virtual void apply_request(Apply& _return) = 0;
  virtual void apply_finish(const int32_t status, const std::string& errMsg) = 0;
  virtual void funCall(std::vector<std::string> & _return, const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap) = 0;
  virtual void read_action(std::string& _return) = 0;
  virtual int32_t db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer) = 0;
  virtual void db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer) = 0;
  virtual void db_remove_i64(const int32_t itr) = 0;
  virtual void db_get_i64(std::string& _return, const int32_t itr) = 0;
  virtual void db_next_i64(Result& _return, const int32_t itr) = 0;
  virtual void db_previous_i64(Result& _return, const int32_t itr) = 0;
  virtual int32_t db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) = 0;
  virtual int32_t db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) = 0;
  virtual int32_t db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) = 0;
  virtual int32_t db_end_i64(const int64_t code, const int64_t scope, const int64_t table) = 0;
  virtual void db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer) = 0;
  virtual void db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id) = 0;
};

class RpcServiceIfFactory {
 public:
  typedef RpcServiceIf Handler;

  virtual ~RpcServiceIfFactory() {}

  virtual RpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RpcServiceIf* /* handler */) = 0;
};

class RpcServiceIfSingletonFactory : virtual public RpcServiceIfFactory {
 public:
  RpcServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<RpcServiceIf>& iface) : iface_(iface) {}
  virtual ~RpcServiceIfSingletonFactory() {}

  virtual RpcServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RpcServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<RpcServiceIf> iface_;
};

class RpcServiceNull : virtual public RpcServiceIf {
 public:
  virtual ~RpcServiceNull() {}
  void apply_request(Apply& /* _return */) {
    return;
  }
  void apply_finish(const int32_t /* status */, const std::string& /* errMsg */) {
    return;
  }
  void funCall(std::vector<std::string> & /* _return */, const int64_t /* callTime */, const std::string& /* funCode */, const std::map<std::string, std::string> & /* paramMap */) {
    return;
  }
  void read_action(std::string& /* _return */) {
    return;
  }
  int32_t db_store_i64(const int64_t /* scope */, const int64_t /* table */, const int64_t /* payer */, const int64_t /* id */, const std::string& /* buffer */) {
    int32_t _return = 0;
    return _return;
  }
  void db_update_i64(const int32_t /* itr */, const int64_t /* payer */, const std::string& /* buffer */) {
    return;
  }
  void db_remove_i64(const int32_t /* itr */) {
    return;
  }
  void db_get_i64(std::string& /* _return */, const int32_t /* itr */) {
    return;
  }
  void db_next_i64(Result& /* _return */, const int32_t /* itr */) {
    return;
  }
  void db_previous_i64(Result& /* _return */, const int32_t /* itr */) {
    return;
  }
  int32_t db_find_i64(const int64_t /* code */, const int64_t /* scope */, const int64_t /* table */, const int64_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_lowerbound_i64(const int64_t /* code */, const int64_t /* scope */, const int64_t /* table */, const int64_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_upperbound_i64(const int64_t /* code */, const int64_t /* scope */, const int64_t /* table */, const int64_t /* id */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t db_end_i64(const int64_t /* code */, const int64_t /* scope */, const int64_t /* table */) {
    int32_t _return = 0;
    return _return;
  }
  void db_update_i64_ex(const int64_t /* scope */, const int64_t /* payer */, const int64_t /* table */, const int64_t /* id */, const std::string& /* buffer */) {
    return;
  }
  void db_remove_i64_ex(const int64_t /* scope */, const int64_t /* payer */, const int64_t /* table */, const int64_t /* id */) {
    return;
  }
};


class RpcService_apply_request_args {
 public:

  RpcService_apply_request_args(const RpcService_apply_request_args&);
  RpcService_apply_request_args& operator=(const RpcService_apply_request_args&);
  RpcService_apply_request_args() {
  }

  virtual ~RpcService_apply_request_args() throw();

  bool operator == (const RpcService_apply_request_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_apply_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_apply_request_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_apply_request_pargs {
 public:


  virtual ~RpcService_apply_request_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_apply_request_result__isset {
  _RpcService_apply_request_result__isset() : success(false) {}
  bool success :1;
} _RpcService_apply_request_result__isset;

class RpcService_apply_request_result {
 public:

  RpcService_apply_request_result(const RpcService_apply_request_result&);
  RpcService_apply_request_result& operator=(const RpcService_apply_request_result&);
  RpcService_apply_request_result() {
  }

  virtual ~RpcService_apply_request_result() throw();
  Apply success;

  _RpcService_apply_request_result__isset __isset;

  void __set_success(const Apply& val);

  bool operator == (const RpcService_apply_request_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_apply_request_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_apply_request_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_apply_request_presult__isset {
  _RpcService_apply_request_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_apply_request_presult__isset;

class RpcService_apply_request_presult {
 public:


  virtual ~RpcService_apply_request_presult() throw();
  Apply* success;

  _RpcService_apply_request_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_apply_finish_args__isset {
  _RpcService_apply_finish_args__isset() : status(false), errMsg(false) {}
  bool status :1;
  bool errMsg :1;
} _RpcService_apply_finish_args__isset;

class RpcService_apply_finish_args {
 public:

  RpcService_apply_finish_args(const RpcService_apply_finish_args&);
  RpcService_apply_finish_args& operator=(const RpcService_apply_finish_args&);
  RpcService_apply_finish_args() : status(0), errMsg() {
  }

  virtual ~RpcService_apply_finish_args() throw();
  int32_t status;
  std::string errMsg;

  _RpcService_apply_finish_args__isset __isset;

  void __set_status(const int32_t val);

  void __set_errMsg(const std::string& val);

  bool operator == (const RpcService_apply_finish_args & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    if (!(errMsg == rhs.errMsg))
      return false;
    return true;
  }
  bool operator != (const RpcService_apply_finish_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_apply_finish_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_apply_finish_pargs {
 public:


  virtual ~RpcService_apply_finish_pargs() throw();
  const int32_t* status;
  const std::string* errMsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_apply_finish_result {
 public:

  RpcService_apply_finish_result(const RpcService_apply_finish_result&);
  RpcService_apply_finish_result& operator=(const RpcService_apply_finish_result&);
  RpcService_apply_finish_result() {
  }

  virtual ~RpcService_apply_finish_result() throw();

  bool operator == (const RpcService_apply_finish_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_apply_finish_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_apply_finish_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_apply_finish_presult {
 public:


  virtual ~RpcService_apply_finish_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_funCall_args__isset {
  _RpcService_funCall_args__isset() : callTime(false), funCode(false), paramMap(false) {}
  bool callTime :1;
  bool funCode :1;
  bool paramMap :1;
} _RpcService_funCall_args__isset;

class RpcService_funCall_args {
 public:

  RpcService_funCall_args(const RpcService_funCall_args&);
  RpcService_funCall_args& operator=(const RpcService_funCall_args&);
  RpcService_funCall_args() : callTime(0), funCode() {
  }

  virtual ~RpcService_funCall_args() throw();
  int64_t callTime;
  std::string funCode;
  std::map<std::string, std::string>  paramMap;

  _RpcService_funCall_args__isset __isset;

  void __set_callTime(const int64_t val);

  void __set_funCode(const std::string& val);

  void __set_paramMap(const std::map<std::string, std::string> & val);

  bool operator == (const RpcService_funCall_args & rhs) const
  {
    if (!(callTime == rhs.callTime))
      return false;
    if (!(funCode == rhs.funCode))
      return false;
    if (!(paramMap == rhs.paramMap))
      return false;
    return true;
  }
  bool operator != (const RpcService_funCall_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_funCall_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_funCall_pargs {
 public:


  virtual ~RpcService_funCall_pargs() throw();
  const int64_t* callTime;
  const std::string* funCode;
  const std::map<std::string, std::string> * paramMap;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_funCall_result__isset {
  _RpcService_funCall_result__isset() : success(false) {}
  bool success :1;
} _RpcService_funCall_result__isset;

class RpcService_funCall_result {
 public:

  RpcService_funCall_result(const RpcService_funCall_result&);
  RpcService_funCall_result& operator=(const RpcService_funCall_result&);
  RpcService_funCall_result() {
  }

  virtual ~RpcService_funCall_result() throw();
  std::vector<std::string>  success;

  _RpcService_funCall_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const RpcService_funCall_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_funCall_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_funCall_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_funCall_presult__isset {
  _RpcService_funCall_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_funCall_presult__isset;

class RpcService_funCall_presult {
 public:


  virtual ~RpcService_funCall_presult() throw();
  std::vector<std::string> * success;

  _RpcService_funCall_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RpcService_read_action_args {
 public:

  RpcService_read_action_args(const RpcService_read_action_args&);
  RpcService_read_action_args& operator=(const RpcService_read_action_args&);
  RpcService_read_action_args() {
  }

  virtual ~RpcService_read_action_args() throw();

  bool operator == (const RpcService_read_action_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_read_action_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_read_action_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_read_action_pargs {
 public:


  virtual ~RpcService_read_action_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_read_action_result__isset {
  _RpcService_read_action_result__isset() : success(false) {}
  bool success :1;
} _RpcService_read_action_result__isset;

class RpcService_read_action_result {
 public:

  RpcService_read_action_result(const RpcService_read_action_result&);
  RpcService_read_action_result& operator=(const RpcService_read_action_result&);
  RpcService_read_action_result() : success() {
  }

  virtual ~RpcService_read_action_result() throw();
  std::string success;

  _RpcService_read_action_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RpcService_read_action_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_read_action_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_read_action_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_read_action_presult__isset {
  _RpcService_read_action_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_read_action_presult__isset;

class RpcService_read_action_presult {
 public:


  virtual ~RpcService_read_action_presult() throw();
  std::string* success;

  _RpcService_read_action_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_store_i64_args__isset {
  _RpcService_db_store_i64_args__isset() : scope(false), table(false), payer(false), id(false), buffer(false) {}
  bool scope :1;
  bool table :1;
  bool payer :1;
  bool id :1;
  bool buffer :1;
} _RpcService_db_store_i64_args__isset;

class RpcService_db_store_i64_args {
 public:

  RpcService_db_store_i64_args(const RpcService_db_store_i64_args&);
  RpcService_db_store_i64_args& operator=(const RpcService_db_store_i64_args&);
  RpcService_db_store_i64_args() : scope(0), table(0), payer(0), id(0), buffer() {
  }

  virtual ~RpcService_db_store_i64_args() throw();
  int64_t scope;
  int64_t table;
  int64_t payer;
  int64_t id;
  std::string buffer;

  _RpcService_db_store_i64_args__isset __isset;

  void __set_scope(const int64_t val);

  void __set_table(const int64_t val);

  void __set_payer(const int64_t val);

  void __set_id(const int64_t val);

  void __set_buffer(const std::string& val);

  bool operator == (const RpcService_db_store_i64_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_store_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_store_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_store_i64_pargs {
 public:


  virtual ~RpcService_db_store_i64_pargs() throw();
  const int64_t* scope;
  const int64_t* table;
  const int64_t* payer;
  const int64_t* id;
  const std::string* buffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_store_i64_result__isset {
  _RpcService_db_store_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_store_i64_result__isset;

class RpcService_db_store_i64_result {
 public:

  RpcService_db_store_i64_result(const RpcService_db_store_i64_result&);
  RpcService_db_store_i64_result& operator=(const RpcService_db_store_i64_result&);
  RpcService_db_store_i64_result() : success(0) {
  }

  virtual ~RpcService_db_store_i64_result() throw();
  int32_t success;

  _RpcService_db_store_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcService_db_store_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_store_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_store_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_store_i64_presult__isset {
  _RpcService_db_store_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_store_i64_presult__isset;

class RpcService_db_store_i64_presult {
 public:


  virtual ~RpcService_db_store_i64_presult() throw();
  int32_t* success;

  _RpcService_db_store_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_update_i64_args__isset {
  _RpcService_db_update_i64_args__isset() : itr(false), payer(false), buffer(false) {}
  bool itr :1;
  bool payer :1;
  bool buffer :1;
} _RpcService_db_update_i64_args__isset;

class RpcService_db_update_i64_args {
 public:

  RpcService_db_update_i64_args(const RpcService_db_update_i64_args&);
  RpcService_db_update_i64_args& operator=(const RpcService_db_update_i64_args&);
  RpcService_db_update_i64_args() : itr(0), payer(0), buffer() {
  }

  virtual ~RpcService_db_update_i64_args() throw();
  int32_t itr;
  int64_t payer;
  std::string buffer;

  _RpcService_db_update_i64_args__isset __isset;

  void __set_itr(const int32_t val);

  void __set_payer(const int64_t val);

  void __set_buffer(const std::string& val);

  bool operator == (const RpcService_db_update_i64_args & rhs) const
  {
    if (!(itr == rhs.itr))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_update_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_update_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_pargs {
 public:


  virtual ~RpcService_db_update_i64_pargs() throw();
  const int32_t* itr;
  const int64_t* payer;
  const std::string* buffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_result {
 public:

  RpcService_db_update_i64_result(const RpcService_db_update_i64_result&);
  RpcService_db_update_i64_result& operator=(const RpcService_db_update_i64_result&);
  RpcService_db_update_i64_result() {
  }

  virtual ~RpcService_db_update_i64_result() throw();

  bool operator == (const RpcService_db_update_i64_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_db_update_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_update_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_presult {
 public:


  virtual ~RpcService_db_update_i64_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_remove_i64_args__isset {
  _RpcService_db_remove_i64_args__isset() : itr(false) {}
  bool itr :1;
} _RpcService_db_remove_i64_args__isset;

class RpcService_db_remove_i64_args {
 public:

  RpcService_db_remove_i64_args(const RpcService_db_remove_i64_args&);
  RpcService_db_remove_i64_args& operator=(const RpcService_db_remove_i64_args&);
  RpcService_db_remove_i64_args() : itr(0) {
  }

  virtual ~RpcService_db_remove_i64_args() throw();
  int32_t itr;

  _RpcService_db_remove_i64_args__isset __isset;

  void __set_itr(const int32_t val);

  bool operator == (const RpcService_db_remove_i64_args & rhs) const
  {
    if (!(itr == rhs.itr))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_remove_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_remove_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_pargs {
 public:


  virtual ~RpcService_db_remove_i64_pargs() throw();
  const int32_t* itr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_result {
 public:

  RpcService_db_remove_i64_result(const RpcService_db_remove_i64_result&);
  RpcService_db_remove_i64_result& operator=(const RpcService_db_remove_i64_result&);
  RpcService_db_remove_i64_result() {
  }

  virtual ~RpcService_db_remove_i64_result() throw();

  bool operator == (const RpcService_db_remove_i64_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_db_remove_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_remove_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_presult {
 public:


  virtual ~RpcService_db_remove_i64_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_get_i64_args__isset {
  _RpcService_db_get_i64_args__isset() : itr(false) {}
  bool itr :1;
} _RpcService_db_get_i64_args__isset;

class RpcService_db_get_i64_args {
 public:

  RpcService_db_get_i64_args(const RpcService_db_get_i64_args&);
  RpcService_db_get_i64_args& operator=(const RpcService_db_get_i64_args&);
  RpcService_db_get_i64_args() : itr(0) {
  }

  virtual ~RpcService_db_get_i64_args() throw();
  int32_t itr;

  _RpcService_db_get_i64_args__isset __isset;

  void __set_itr(const int32_t val);

  bool operator == (const RpcService_db_get_i64_args & rhs) const
  {
    if (!(itr == rhs.itr))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_get_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_get_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_get_i64_pargs {
 public:


  virtual ~RpcService_db_get_i64_pargs() throw();
  const int32_t* itr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_get_i64_result__isset {
  _RpcService_db_get_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_get_i64_result__isset;

class RpcService_db_get_i64_result {
 public:

  RpcService_db_get_i64_result(const RpcService_db_get_i64_result&);
  RpcService_db_get_i64_result& operator=(const RpcService_db_get_i64_result&);
  RpcService_db_get_i64_result() : success() {
  }

  virtual ~RpcService_db_get_i64_result() throw();
  std::string success;

  _RpcService_db_get_i64_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const RpcService_db_get_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_get_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_get_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_get_i64_presult__isset {
  _RpcService_db_get_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_get_i64_presult__isset;

class RpcService_db_get_i64_presult {
 public:


  virtual ~RpcService_db_get_i64_presult() throw();
  std::string* success;

  _RpcService_db_get_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_next_i64_args__isset {
  _RpcService_db_next_i64_args__isset() : itr(false) {}
  bool itr :1;
} _RpcService_db_next_i64_args__isset;

class RpcService_db_next_i64_args {
 public:

  RpcService_db_next_i64_args(const RpcService_db_next_i64_args&);
  RpcService_db_next_i64_args& operator=(const RpcService_db_next_i64_args&);
  RpcService_db_next_i64_args() : itr(0) {
  }

  virtual ~RpcService_db_next_i64_args() throw();
  int32_t itr;

  _RpcService_db_next_i64_args__isset __isset;

  void __set_itr(const int32_t val);

  bool operator == (const RpcService_db_next_i64_args & rhs) const
  {
    if (!(itr == rhs.itr))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_next_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_next_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_next_i64_pargs {
 public:


  virtual ~RpcService_db_next_i64_pargs() throw();
  const int32_t* itr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_next_i64_result__isset {
  _RpcService_db_next_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_next_i64_result__isset;

class RpcService_db_next_i64_result {
 public:

  RpcService_db_next_i64_result(const RpcService_db_next_i64_result&);
  RpcService_db_next_i64_result& operator=(const RpcService_db_next_i64_result&);
  RpcService_db_next_i64_result() {
  }

  virtual ~RpcService_db_next_i64_result() throw();
  Result success;

  _RpcService_db_next_i64_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const RpcService_db_next_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_next_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_next_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_next_i64_presult__isset {
  _RpcService_db_next_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_next_i64_presult__isset;

class RpcService_db_next_i64_presult {
 public:


  virtual ~RpcService_db_next_i64_presult() throw();
  Result* success;

  _RpcService_db_next_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_previous_i64_args__isset {
  _RpcService_db_previous_i64_args__isset() : itr(false) {}
  bool itr :1;
} _RpcService_db_previous_i64_args__isset;

class RpcService_db_previous_i64_args {
 public:

  RpcService_db_previous_i64_args(const RpcService_db_previous_i64_args&);
  RpcService_db_previous_i64_args& operator=(const RpcService_db_previous_i64_args&);
  RpcService_db_previous_i64_args() : itr(0) {
  }

  virtual ~RpcService_db_previous_i64_args() throw();
  int32_t itr;

  _RpcService_db_previous_i64_args__isset __isset;

  void __set_itr(const int32_t val);

  bool operator == (const RpcService_db_previous_i64_args & rhs) const
  {
    if (!(itr == rhs.itr))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_previous_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_previous_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_previous_i64_pargs {
 public:


  virtual ~RpcService_db_previous_i64_pargs() throw();
  const int32_t* itr;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_previous_i64_result__isset {
  _RpcService_db_previous_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_previous_i64_result__isset;

class RpcService_db_previous_i64_result {
 public:

  RpcService_db_previous_i64_result(const RpcService_db_previous_i64_result&);
  RpcService_db_previous_i64_result& operator=(const RpcService_db_previous_i64_result&);
  RpcService_db_previous_i64_result() {
  }

  virtual ~RpcService_db_previous_i64_result() throw();
  Result success;

  _RpcService_db_previous_i64_result__isset __isset;

  void __set_success(const Result& val);

  bool operator == (const RpcService_db_previous_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_previous_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_previous_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_previous_i64_presult__isset {
  _RpcService_db_previous_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_previous_i64_presult__isset;

class RpcService_db_previous_i64_presult {
 public:


  virtual ~RpcService_db_previous_i64_presult() throw();
  Result* success;

  _RpcService_db_previous_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_find_i64_args__isset {
  _RpcService_db_find_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _RpcService_db_find_i64_args__isset;

class RpcService_db_find_i64_args {
 public:

  RpcService_db_find_i64_args(const RpcService_db_find_i64_args&);
  RpcService_db_find_i64_args& operator=(const RpcService_db_find_i64_args&);
  RpcService_db_find_i64_args() : code(0), scope(0), table(0), id(0) {
  }

  virtual ~RpcService_db_find_i64_args() throw();
  int64_t code;
  int64_t scope;
  int64_t table;
  int64_t id;

  _RpcService_db_find_i64_args__isset __isset;

  void __set_code(const int64_t val);

  void __set_scope(const int64_t val);

  void __set_table(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const RpcService_db_find_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_find_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_find_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_find_i64_pargs {
 public:


  virtual ~RpcService_db_find_i64_pargs() throw();
  const int64_t* code;
  const int64_t* scope;
  const int64_t* table;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_find_i64_result__isset {
  _RpcService_db_find_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_find_i64_result__isset;

class RpcService_db_find_i64_result {
 public:

  RpcService_db_find_i64_result(const RpcService_db_find_i64_result&);
  RpcService_db_find_i64_result& operator=(const RpcService_db_find_i64_result&);
  RpcService_db_find_i64_result() : success(0) {
  }

  virtual ~RpcService_db_find_i64_result() throw();
  int32_t success;

  _RpcService_db_find_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcService_db_find_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_find_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_find_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_find_i64_presult__isset {
  _RpcService_db_find_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_find_i64_presult__isset;

class RpcService_db_find_i64_presult {
 public:


  virtual ~RpcService_db_find_i64_presult() throw();
  int32_t* success;

  _RpcService_db_find_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_lowerbound_i64_args__isset {
  _RpcService_db_lowerbound_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _RpcService_db_lowerbound_i64_args__isset;

class RpcService_db_lowerbound_i64_args {
 public:

  RpcService_db_lowerbound_i64_args(const RpcService_db_lowerbound_i64_args&);
  RpcService_db_lowerbound_i64_args& operator=(const RpcService_db_lowerbound_i64_args&);
  RpcService_db_lowerbound_i64_args() : code(0), scope(0), table(0), id(0) {
  }

  virtual ~RpcService_db_lowerbound_i64_args() throw();
  int64_t code;
  int64_t scope;
  int64_t table;
  int64_t id;

  _RpcService_db_lowerbound_i64_args__isset __isset;

  void __set_code(const int64_t val);

  void __set_scope(const int64_t val);

  void __set_table(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const RpcService_db_lowerbound_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_lowerbound_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_lowerbound_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_lowerbound_i64_pargs {
 public:


  virtual ~RpcService_db_lowerbound_i64_pargs() throw();
  const int64_t* code;
  const int64_t* scope;
  const int64_t* table;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_lowerbound_i64_result__isset {
  _RpcService_db_lowerbound_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_lowerbound_i64_result__isset;

class RpcService_db_lowerbound_i64_result {
 public:

  RpcService_db_lowerbound_i64_result(const RpcService_db_lowerbound_i64_result&);
  RpcService_db_lowerbound_i64_result& operator=(const RpcService_db_lowerbound_i64_result&);
  RpcService_db_lowerbound_i64_result() : success(0) {
  }

  virtual ~RpcService_db_lowerbound_i64_result() throw();
  int32_t success;

  _RpcService_db_lowerbound_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcService_db_lowerbound_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_lowerbound_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_lowerbound_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_lowerbound_i64_presult__isset {
  _RpcService_db_lowerbound_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_lowerbound_i64_presult__isset;

class RpcService_db_lowerbound_i64_presult {
 public:


  virtual ~RpcService_db_lowerbound_i64_presult() throw();
  int32_t* success;

  _RpcService_db_lowerbound_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_upperbound_i64_args__isset {
  _RpcService_db_upperbound_i64_args__isset() : code(false), scope(false), table(false), id(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
  bool id :1;
} _RpcService_db_upperbound_i64_args__isset;

class RpcService_db_upperbound_i64_args {
 public:

  RpcService_db_upperbound_i64_args(const RpcService_db_upperbound_i64_args&);
  RpcService_db_upperbound_i64_args& operator=(const RpcService_db_upperbound_i64_args&);
  RpcService_db_upperbound_i64_args() : code(0), scope(0), table(0), id(0) {
  }

  virtual ~RpcService_db_upperbound_i64_args() throw();
  int64_t code;
  int64_t scope;
  int64_t table;
  int64_t id;

  _RpcService_db_upperbound_i64_args__isset __isset;

  void __set_code(const int64_t val);

  void __set_scope(const int64_t val);

  void __set_table(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const RpcService_db_upperbound_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_upperbound_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_upperbound_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_upperbound_i64_pargs {
 public:


  virtual ~RpcService_db_upperbound_i64_pargs() throw();
  const int64_t* code;
  const int64_t* scope;
  const int64_t* table;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_upperbound_i64_result__isset {
  _RpcService_db_upperbound_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_upperbound_i64_result__isset;

class RpcService_db_upperbound_i64_result {
 public:

  RpcService_db_upperbound_i64_result(const RpcService_db_upperbound_i64_result&);
  RpcService_db_upperbound_i64_result& operator=(const RpcService_db_upperbound_i64_result&);
  RpcService_db_upperbound_i64_result() : success(0) {
  }

  virtual ~RpcService_db_upperbound_i64_result() throw();
  int32_t success;

  _RpcService_db_upperbound_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcService_db_upperbound_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_upperbound_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_upperbound_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_upperbound_i64_presult__isset {
  _RpcService_db_upperbound_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_upperbound_i64_presult__isset;

class RpcService_db_upperbound_i64_presult {
 public:


  virtual ~RpcService_db_upperbound_i64_presult() throw();
  int32_t* success;

  _RpcService_db_upperbound_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_end_i64_args__isset {
  _RpcService_db_end_i64_args__isset() : code(false), scope(false), table(false) {}
  bool code :1;
  bool scope :1;
  bool table :1;
} _RpcService_db_end_i64_args__isset;

class RpcService_db_end_i64_args {
 public:

  RpcService_db_end_i64_args(const RpcService_db_end_i64_args&);
  RpcService_db_end_i64_args& operator=(const RpcService_db_end_i64_args&);
  RpcService_db_end_i64_args() : code(0), scope(0), table(0) {
  }

  virtual ~RpcService_db_end_i64_args() throw();
  int64_t code;
  int64_t scope;
  int64_t table;

  _RpcService_db_end_i64_args__isset __isset;

  void __set_code(const int64_t val);

  void __set_scope(const int64_t val);

  void __set_table(const int64_t val);

  bool operator == (const RpcService_db_end_i64_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(scope == rhs.scope))
      return false;
    if (!(table == rhs.table))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_end_i64_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_end_i64_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_end_i64_pargs {
 public:


  virtual ~RpcService_db_end_i64_pargs() throw();
  const int64_t* code;
  const int64_t* scope;
  const int64_t* table;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_end_i64_result__isset {
  _RpcService_db_end_i64_result__isset() : success(false) {}
  bool success :1;
} _RpcService_db_end_i64_result__isset;

class RpcService_db_end_i64_result {
 public:

  RpcService_db_end_i64_result(const RpcService_db_end_i64_result&);
  RpcService_db_end_i64_result& operator=(const RpcService_db_end_i64_result&);
  RpcService_db_end_i64_result() : success(0) {
  }

  virtual ~RpcService_db_end_i64_result() throw();
  int32_t success;

  _RpcService_db_end_i64_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const RpcService_db_end_i64_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_end_i64_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_end_i64_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RpcService_db_end_i64_presult__isset {
  _RpcService_db_end_i64_presult__isset() : success(false) {}
  bool success :1;
} _RpcService_db_end_i64_presult__isset;

class RpcService_db_end_i64_presult {
 public:


  virtual ~RpcService_db_end_i64_presult() throw();
  int32_t* success;

  _RpcService_db_end_i64_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_update_i64_ex_args__isset {
  _RpcService_db_update_i64_ex_args__isset() : scope(false), payer(false), table(false), id(false), buffer(false) {}
  bool scope :1;
  bool payer :1;
  bool table :1;
  bool id :1;
  bool buffer :1;
} _RpcService_db_update_i64_ex_args__isset;

class RpcService_db_update_i64_ex_args {
 public:

  RpcService_db_update_i64_ex_args(const RpcService_db_update_i64_ex_args&);
  RpcService_db_update_i64_ex_args& operator=(const RpcService_db_update_i64_ex_args&);
  RpcService_db_update_i64_ex_args() : scope(0), payer(0), table(0), id(0), buffer() {
  }

  virtual ~RpcService_db_update_i64_ex_args() throw();
  int64_t scope;
  int64_t payer;
  int64_t table;
  int64_t id;
  std::string buffer;

  _RpcService_db_update_i64_ex_args__isset __isset;

  void __set_scope(const int64_t val);

  void __set_payer(const int64_t val);

  void __set_table(const int64_t val);

  void __set_id(const int64_t val);

  void __set_buffer(const std::string& val);

  bool operator == (const RpcService_db_update_i64_ex_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(buffer == rhs.buffer))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_update_i64_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_update_i64_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_ex_pargs {
 public:


  virtual ~RpcService_db_update_i64_ex_pargs() throw();
  const int64_t* scope;
  const int64_t* payer;
  const int64_t* table;
  const int64_t* id;
  const std::string* buffer;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_ex_result {
 public:

  RpcService_db_update_i64_ex_result(const RpcService_db_update_i64_ex_result&);
  RpcService_db_update_i64_ex_result& operator=(const RpcService_db_update_i64_ex_result&);
  RpcService_db_update_i64_ex_result() {
  }

  virtual ~RpcService_db_update_i64_ex_result() throw();

  bool operator == (const RpcService_db_update_i64_ex_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_db_update_i64_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_update_i64_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_update_i64_ex_presult {
 public:


  virtual ~RpcService_db_update_i64_ex_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RpcService_db_remove_i64_ex_args__isset {
  _RpcService_db_remove_i64_ex_args__isset() : scope(false), payer(false), table(false), id(false) {}
  bool scope :1;
  bool payer :1;
  bool table :1;
  bool id :1;
} _RpcService_db_remove_i64_ex_args__isset;

class RpcService_db_remove_i64_ex_args {
 public:

  RpcService_db_remove_i64_ex_args(const RpcService_db_remove_i64_ex_args&);
  RpcService_db_remove_i64_ex_args& operator=(const RpcService_db_remove_i64_ex_args&);
  RpcService_db_remove_i64_ex_args() : scope(0), payer(0), table(0), id(0) {
  }

  virtual ~RpcService_db_remove_i64_ex_args() throw();
  int64_t scope;
  int64_t payer;
  int64_t table;
  int64_t id;

  _RpcService_db_remove_i64_ex_args__isset __isset;

  void __set_scope(const int64_t val);

  void __set_payer(const int64_t val);

  void __set_table(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const RpcService_db_remove_i64_ex_args & rhs) const
  {
    if (!(scope == rhs.scope))
      return false;
    if (!(payer == rhs.payer))
      return false;
    if (!(table == rhs.table))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RpcService_db_remove_i64_ex_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_remove_i64_ex_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_ex_pargs {
 public:


  virtual ~RpcService_db_remove_i64_ex_pargs() throw();
  const int64_t* scope;
  const int64_t* payer;
  const int64_t* table;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_ex_result {
 public:

  RpcService_db_remove_i64_ex_result(const RpcService_db_remove_i64_ex_result&);
  RpcService_db_remove_i64_ex_result& operator=(const RpcService_db_remove_i64_ex_result&);
  RpcService_db_remove_i64_ex_result() {
  }

  virtual ~RpcService_db_remove_i64_ex_result() throw();

  bool operator == (const RpcService_db_remove_i64_ex_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RpcService_db_remove_i64_ex_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RpcService_db_remove_i64_ex_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RpcService_db_remove_i64_ex_presult {
 public:


  virtual ~RpcService_db_remove_i64_ex_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RpcServiceClient : virtual public RpcServiceIf {
 public:
  RpcServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void apply_request(Apply& _return);
  void send_apply_request();
  void recv_apply_request(Apply& _return);
  void apply_finish(const int32_t status, const std::string& errMsg);
  void send_apply_finish(const int32_t status, const std::string& errMsg);
  void recv_apply_finish();
  void funCall(std::vector<std::string> & _return, const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap);
  void send_funCall(const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap);
  void recv_funCall(std::vector<std::string> & _return);
  void read_action(std::string& _return);
  void send_read_action();
  void recv_read_action(std::string& _return);
  int32_t db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer);
  void send_db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer);
  int32_t recv_db_store_i64();
  void db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer);
  void send_db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer);
  void recv_db_update_i64();
  void db_remove_i64(const int32_t itr);
  void send_db_remove_i64(const int32_t itr);
  void recv_db_remove_i64();
  void db_get_i64(std::string& _return, const int32_t itr);
  void send_db_get_i64(const int32_t itr);
  void recv_db_get_i64(std::string& _return);
  void db_next_i64(Result& _return, const int32_t itr);
  void send_db_next_i64(const int32_t itr);
  void recv_db_next_i64(Result& _return);
  void db_previous_i64(Result& _return, const int32_t itr);
  void send_db_previous_i64(const int32_t itr);
  void recv_db_previous_i64(Result& _return);
  int32_t db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  void send_db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_find_i64();
  int32_t db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  void send_db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_lowerbound_i64();
  int32_t db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  void send_db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_upperbound_i64();
  int32_t db_end_i64(const int64_t code, const int64_t scope, const int64_t table);
  void send_db_end_i64(const int64_t code, const int64_t scope, const int64_t table);
  int32_t recv_db_end_i64();
  void db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer);
  void send_db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer);
  void recv_db_update_i64_ex();
  void db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id);
  void send_db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id);
  void recv_db_remove_i64_ex();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RpcServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<RpcServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RpcServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_apply_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_apply_finish(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_funCall(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_read_action(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_store_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_update_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_remove_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_get_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_next_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_previous_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_find_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_lowerbound_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_upperbound_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_end_i64(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_update_i64_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_db_remove_i64_ex(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RpcServiceProcessor(::apache::thrift::stdcxx::shared_ptr<RpcServiceIf> iface) :
    iface_(iface) {
    processMap_["apply_request"] = &RpcServiceProcessor::process_apply_request;
    processMap_["apply_finish"] = &RpcServiceProcessor::process_apply_finish;
    processMap_["funCall"] = &RpcServiceProcessor::process_funCall;
    processMap_["read_action"] = &RpcServiceProcessor::process_read_action;
    processMap_["db_store_i64"] = &RpcServiceProcessor::process_db_store_i64;
    processMap_["db_update_i64"] = &RpcServiceProcessor::process_db_update_i64;
    processMap_["db_remove_i64"] = &RpcServiceProcessor::process_db_remove_i64;
    processMap_["db_get_i64"] = &RpcServiceProcessor::process_db_get_i64;
    processMap_["db_next_i64"] = &RpcServiceProcessor::process_db_next_i64;
    processMap_["db_previous_i64"] = &RpcServiceProcessor::process_db_previous_i64;
    processMap_["db_find_i64"] = &RpcServiceProcessor::process_db_find_i64;
    processMap_["db_lowerbound_i64"] = &RpcServiceProcessor::process_db_lowerbound_i64;
    processMap_["db_upperbound_i64"] = &RpcServiceProcessor::process_db_upperbound_i64;
    processMap_["db_end_i64"] = &RpcServiceProcessor::process_db_end_i64;
    processMap_["db_update_i64_ex"] = &RpcServiceProcessor::process_db_update_i64_ex;
    processMap_["db_remove_i64_ex"] = &RpcServiceProcessor::process_db_remove_i64_ex;
  }

  virtual ~RpcServiceProcessor() {}
};

class RpcServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RpcServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< RpcServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< RpcServiceIfFactory > handlerFactory_;
};

class RpcServiceMultiface : virtual public RpcServiceIf {
 public:
  RpcServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<RpcServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RpcServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<RpcServiceIf> > ifaces_;
  RpcServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<RpcServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void apply_request(Apply& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply_request(_return);
    }
    ifaces_[i]->apply_request(_return);
    return;
  }

  void apply_finish(const int32_t status, const std::string& errMsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->apply_finish(status, errMsg);
    }
    ifaces_[i]->apply_finish(status, errMsg);
  }

  void funCall(std::vector<std::string> & _return, const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->funCall(_return, callTime, funCode, paramMap);
    }
    ifaces_[i]->funCall(_return, callTime, funCode, paramMap);
    return;
  }

  void read_action(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->read_action(_return);
    }
    ifaces_[i]->read_action(_return);
    return;
  }

  int32_t db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_store_i64(scope, table, payer, id, buffer);
    }
    return ifaces_[i]->db_store_i64(scope, table, payer, id, buffer);
  }

  void db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_update_i64(itr, payer, buffer);
    }
    ifaces_[i]->db_update_i64(itr, payer, buffer);
  }

  void db_remove_i64(const int32_t itr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_remove_i64(itr);
    }
    ifaces_[i]->db_remove_i64(itr);
  }

  void db_get_i64(std::string& _return, const int32_t itr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_get_i64(_return, itr);
    }
    ifaces_[i]->db_get_i64(_return, itr);
    return;
  }

  void db_next_i64(Result& _return, const int32_t itr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_next_i64(_return, itr);
    }
    ifaces_[i]->db_next_i64(_return, itr);
    return;
  }

  void db_previous_i64(Result& _return, const int32_t itr) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_previous_i64(_return, itr);
    }
    ifaces_[i]->db_previous_i64(_return, itr);
    return;
  }

  int32_t db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_find_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_find_i64(code, scope, table, id);
  }

  int32_t db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_lowerbound_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_lowerbound_i64(code, scope, table, id);
  }

  int32_t db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_upperbound_i64(code, scope, table, id);
    }
    return ifaces_[i]->db_upperbound_i64(code, scope, table, id);
  }

  int32_t db_end_i64(const int64_t code, const int64_t scope, const int64_t table) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_end_i64(code, scope, table);
    }
    return ifaces_[i]->db_end_i64(code, scope, table);
  }

  void db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_update_i64_ex(scope, payer, table, id, buffer);
    }
    ifaces_[i]->db_update_i64_ex(scope, payer, table, id, buffer);
  }

  void db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->db_remove_i64_ex(scope, payer, table, id);
    }
    ifaces_[i]->db_remove_i64_ex(scope, payer, table, id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RpcServiceConcurrentClient : virtual public RpcServiceIf {
 public:
  RpcServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RpcServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void apply_request(Apply& _return);
  int32_t send_apply_request();
  void recv_apply_request(Apply& _return, const int32_t seqid);
  void apply_finish(const int32_t status, const std::string& errMsg);
  int32_t send_apply_finish(const int32_t status, const std::string& errMsg);
  void recv_apply_finish(const int32_t seqid);
  void funCall(std::vector<std::string> & _return, const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap);
  int32_t send_funCall(const int64_t callTime, const std::string& funCode, const std::map<std::string, std::string> & paramMap);
  void recv_funCall(std::vector<std::string> & _return, const int32_t seqid);
  void read_action(std::string& _return);
  int32_t send_read_action();
  void recv_read_action(std::string& _return, const int32_t seqid);
  int32_t db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer);
  int32_t send_db_store_i64(const int64_t scope, const int64_t table, const int64_t payer, const int64_t id, const std::string& buffer);
  int32_t recv_db_store_i64(const int32_t seqid);
  void db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer);
  int32_t send_db_update_i64(const int32_t itr, const int64_t payer, const std::string& buffer);
  void recv_db_update_i64(const int32_t seqid);
  void db_remove_i64(const int32_t itr);
  int32_t send_db_remove_i64(const int32_t itr);
  void recv_db_remove_i64(const int32_t seqid);
  void db_get_i64(std::string& _return, const int32_t itr);
  int32_t send_db_get_i64(const int32_t itr);
  void recv_db_get_i64(std::string& _return, const int32_t seqid);
  void db_next_i64(Result& _return, const int32_t itr);
  int32_t send_db_next_i64(const int32_t itr);
  void recv_db_next_i64(Result& _return, const int32_t seqid);
  void db_previous_i64(Result& _return, const int32_t itr);
  int32_t send_db_previous_i64(const int32_t itr);
  void recv_db_previous_i64(Result& _return, const int32_t seqid);
  int32_t db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t send_db_find_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_find_i64(const int32_t seqid);
  int32_t db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t send_db_lowerbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_lowerbound_i64(const int32_t seqid);
  int32_t db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t send_db_upperbound_i64(const int64_t code, const int64_t scope, const int64_t table, const int64_t id);
  int32_t recv_db_upperbound_i64(const int32_t seqid);
  int32_t db_end_i64(const int64_t code, const int64_t scope, const int64_t table);
  int32_t send_db_end_i64(const int64_t code, const int64_t scope, const int64_t table);
  int32_t recv_db_end_i64(const int32_t seqid);
  void db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer);
  int32_t send_db_update_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id, const std::string& buffer);
  void recv_db_update_i64_ex(const int32_t seqid);
  void db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id);
  int32_t send_db_remove_i64_ex(const int64_t scope, const int64_t payer, const int64_t table, const int64_t id);
  void recv_db_remove_i64_ex(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
