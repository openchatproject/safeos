cmake_minimum_required( VERSION 3.5 )

include(EosioTesterCommon)

find_library(libtester eosio_testing @CMAKE_BINARY_DIR@/libraries/testing)
find_library(libchain eosio_chain @CMAKE_BINARY_DIR@/libraries/chain)
if ( "${CMAKE_BUILD_TYPE}" EQUAL "Debug" )
   find_library(libfc fc_debug @CMAKE_BINARY_DIR@/libraries/fc)
else()
   find_library(libfc fc @CMAKE_BINARY_DIR@/libraries/fc)
endif()

find_library(libbinaryen binaryen @CMAKE_BINARY_DIR@/externals/binaryen/lib)
find_library(libwasm WASM @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/WASM)
find_library(libwast WAST @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/WAST)
find_library(libir IR     @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/IR)
find_library(libplatform Platform @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/Platform)
find_library(liblogging Logging @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/Logging)
find_library(libruntime Runtime @CMAKE_BINARY_DIR@/libraries/wasm-jit/Source/Runtime)
find_library(libsoftfloat softfloat @CMAKE_BINARY_DIR@/libraries/softfloat)
find_library(liboscrypto crypto @OPENSSL_ROOT_DIR@/lib)
find_library(libosssl ssl @OPENSSL_ROOT_DIR@/lib)
find_library(libchainbase chainbase @CMAKE_BINARY_DIR@/libraries/chainbase)
find_library(libbuiltins builtins @CMAKE_BINARY_DIR@/libraries/builtins)
find_library(libsecp256k1 secp256k1 @Secp256k1_ROOT_DIR@/lib)

macro(add_eosio_test test_name)
   add_executable( ${test_name} ${ARGN} )
   target_link_libraries( ${test_name} 
       ${LLVM} 
       ${libtester}    
       ${libchain} 
       ${libfc} 
       ${libbinaryen} 
       ${libwast} 
       ${libwasm} 
       ${libruntime} 
       ${libplatform} 
       ${libir} 
       ${libsoftfloat} 
       ${liboscrypto} 
       ${libosssl} 
       ${liblogging} 
       ${libchainbase} 
       ${libbuiltins} 
       ${libsecp256k1} 

       LLVMX86Disassembler
       LLVMX86AsmParser
       LLVMX86AsmPrinter
       LLVMX86CodeGen

       LLVMSelectionDAG

       LLVMDebugInfoDWARF
       LLVMAsmPrinter
       LLVMMCParser
       LLVMX86Info

       LLVMOrcJIT
       LLVMExecutionEngine

       LLVMCodeGen
       LLVMScalarOpts
       LLVMTransformUtils

       LLVMipo
       LLVMAnalysis
       LLVMTarget
       LLVMMC
       LLVMCore
       LLVMSupport
       ${Boost_FILESYSTEM_LIBRARY}
       ${Boost_SYSTEM_LIBRARY}
       ${Boost_CHRONO_LIBRARY}
       ${Boost_IOSTREAMS_LIBRARY}
       ${Boost_DATE_TIME_LIBRARY}
       ${PLATFORM_SPECIFIC_LIBS}
      )

   target_include_directories( ${test_name} PUBLIC
                               ${Boost_INCLUDE_DIRS}
                               @OPENSSL_INCLUDE_DIR@
                               @CMAKE_SOURCE_DIR@/libraries/chain/include
                               @CMAKE_BINARY_DIR@/libraries/chain/include
                               @CMAKE_SOURCE_DIR@/libraries/fc/include
                               @CMAKE_SOURCE_DIR@/libraries/softfloat/source/include
                               @CMAKE_SOURCE_DIR@/libraries/softfloat/build/Linux-x86_64-GCC
                               @CMAKE_SOURCE_DIR@/libraries/softfloat/source/8086-SSE
                               @CMAKE_SOURCE_DIR@/libraries/chainbase/include
                               @CMAKE_SOURCE_DIR@/libraries/builtins
                               @CMAKE_SOURCE_DIR@/libraries/testing/include
                               @CMAKE_SOURCE_DIR@/libraries/wasm-jit/Include
                               ${CMAKE_CURRENT_BINARY_DIR}/include )
                            #
   #Manually run unit_test for all supported runtimes
   #To run unit_test with all log from blockchain displayed, put --verbose after --, i.e. unit_test -- --verbose
   add_test(NAME ${test_name}_binaryen COMMAND ${test_name}
    --report_level=detailed --color_output -- --binaryen)
   add_test(NAME ${test_name}_wavm COMMAND ${test_name}
    --report_level=detailed --color_output --catch_system_errors=no -- --wavm)
endmacro()
